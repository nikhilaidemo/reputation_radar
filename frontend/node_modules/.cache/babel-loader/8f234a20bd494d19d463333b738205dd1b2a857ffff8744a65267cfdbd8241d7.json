{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor to attach token to requests\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport const auth = {\n  login: (email, password) => apiClient.post('/auth/login', {\n    email,\n    password\n  }),\n  refresh: () => apiClient.post('/auth/refresh')\n};\nexport const posts = {\n  getPosts: params => apiClient.get('/posts', {\n    params\n  }),\n  createPost: postData => apiClient.post('/posts', postData)\n};\nexport const sources = {\n  getSources: () => apiClient.get('/sources'),\n  registerSource: sourceData => apiClient.post('/sources', sourceData)\n};\nexport const alerts = {\n  getAlerts: params => apiClient.get('/alerts', {\n    params\n  }),\n  resolveAlert: (id, resolvedStatus) => apiClient.post(`/alerts/${id}/resolve`, {\n    resolved: resolvedStatus\n  })\n};\nexport const playbooks = {\n  getPlaybooks: () => apiClient.get('/playbooks'),\n  createPlaybook: playbookData => apiClient.post('/playbooks', playbookData),\n  applyPlaybook: id => apiClient.post(`/playbooks/${id}/apply`)\n};\nexport const users = {\n  getUsers: () => apiClient.get('/users'),\n  createUser: userData => apiClient.post('/users', userData)\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","auth","login","email","password","post","refresh","posts","getPosts","params","get","createPost","postData","sources","getSources","registerSource","sourceData","alerts","getAlerts","resolveAlert","id","resolvedStatus","resolved","playbooks","getPlaybooks","createPlaybook","playbookData","applyPlaybook","users","getUsers","createUser","userData"],"sources":["C:/reputation_radar/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8000/api/v1';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor to attach token to requests\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('accessToken');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const auth = {\r\n  login: (email, password) => apiClient.post('/auth/login', { email, password }),\r\n  refresh: () => apiClient.post('/auth/refresh'),\r\n};\r\n\r\nexport const posts = {\r\n  getPosts: (params) => apiClient.get('/posts', { params }),\r\n  createPost: (postData) => apiClient.post('/posts', postData),\r\n};\r\n\r\nexport const sources = {\r\n  getSources: () => apiClient.get('/sources'),\r\n  registerSource: (sourceData) => apiClient.post('/sources', sourceData),\r\n};\r\n\r\nexport const alerts = {\r\n  getAlerts: (params) => apiClient.get('/alerts', { params }),\r\n  resolveAlert: (id, resolvedStatus) => apiClient.post(`/alerts/${id}/resolve`, { resolved: resolvedStatus }),\r\n};\r\n\r\nexport const playbooks = {\r\n  getPlaybooks: () => apiClient.get('/playbooks'),\r\n  createPlaybook: (playbookData) => apiClient.post('/playbooks', playbookData),\r\n  applyPlaybook: (id) => apiClient.post(`/playbooks/${id}/apply`),\r\n};\r\n\r\nexport const users = {\r\n  getUsers: () => apiClient.get('/users'),\r\n  createUser: (userData) => apiClient.post('/users', userData),\r\n};\r\n\r\nexport default apiClient;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,8BAA8B;AAEzF,MAAMC,SAAS,GAAGL,KAAK,CAACM,MAAM,CAAC;EAC7BC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMG,IAAI,GAAG;EAClBC,KAAK,EAAEA,CAACC,KAAK,EAAEC,QAAQ,KAAKlB,SAAS,CAACmB,IAAI,CAAC,aAAa,EAAE;IAAEF,KAAK;IAAEC;EAAS,CAAC,CAAC;EAC9EE,OAAO,EAAEA,CAAA,KAAMpB,SAAS,CAACmB,IAAI,CAAC,eAAe;AAC/C,CAAC;AAED,OAAO,MAAME,KAAK,GAAG;EACnBC,QAAQ,EAAGC,MAAM,IAAKvB,SAAS,CAACwB,GAAG,CAAC,QAAQ,EAAE;IAAED;EAAO,CAAC,CAAC;EACzDE,UAAU,EAAGC,QAAQ,IAAK1B,SAAS,CAACmB,IAAI,CAAC,QAAQ,EAAEO,QAAQ;AAC7D,CAAC;AAED,OAAO,MAAMC,OAAO,GAAG;EACrBC,UAAU,EAAEA,CAAA,KAAM5B,SAAS,CAACwB,GAAG,CAAC,UAAU,CAAC;EAC3CK,cAAc,EAAGC,UAAU,IAAK9B,SAAS,CAACmB,IAAI,CAAC,UAAU,EAAEW,UAAU;AACvE,CAAC;AAED,OAAO,MAAMC,MAAM,GAAG;EACpBC,SAAS,EAAGT,MAAM,IAAKvB,SAAS,CAACwB,GAAG,CAAC,SAAS,EAAE;IAAED;EAAO,CAAC,CAAC;EAC3DU,YAAY,EAAEA,CAACC,EAAE,EAAEC,cAAc,KAAKnC,SAAS,CAACmB,IAAI,CAAC,WAAWe,EAAE,UAAU,EAAE;IAAEE,QAAQ,EAAED;EAAe,CAAC;AAC5G,CAAC;AAED,OAAO,MAAME,SAAS,GAAG;EACvBC,YAAY,EAAEA,CAAA,KAAMtC,SAAS,CAACwB,GAAG,CAAC,YAAY,CAAC;EAC/Ce,cAAc,EAAGC,YAAY,IAAKxC,SAAS,CAACmB,IAAI,CAAC,YAAY,EAAEqB,YAAY,CAAC;EAC5EC,aAAa,EAAGP,EAAE,IAAKlC,SAAS,CAACmB,IAAI,CAAC,cAAce,EAAE,QAAQ;AAChE,CAAC;AAED,OAAO,MAAMQ,KAAK,GAAG;EACnBC,QAAQ,EAAEA,CAAA,KAAM3C,SAAS,CAACwB,GAAG,CAAC,QAAQ,CAAC;EACvCoB,UAAU,EAAGC,QAAQ,IAAK7C,SAAS,CAACmB,IAAI,CAAC,QAAQ,EAAE0B,QAAQ;AAC7D,CAAC;AAED,eAAe7C,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}